// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Persistence.PreCopiledEntities
{
    public partial class AppDbContextModel
    {
        partial void Initialize()
        {
            var permission = PermissionEntityType.Create(this);
            var permissionType = PermissionTypeEntityType.Create(this);

            PermissionEntityType.CreateForeignKey1(permission, permissionType);

            PermissionEntityType.CreateAnnotations(permission);
            PermissionTypeEntityType.CreateAnnotations(permissionType);

            AddAnnotation("ProductVersion", "8.0.12");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var permission = FindEntityType("Permissions.Domain.Entities.Permission")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            permission.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var permissionsDomainEntitiesPermissionTableBase = new TableBase("Permissions.Domain.Entities.Permission", null, relationalModel);
            var employeeLastNameColumnBase = new ColumnBase<ColumnMappingBase>("EmployeeLastName", "nvarchar(150)", permissionsDomainEntitiesPermissionTableBase);
            permissionsDomainEntitiesPermissionTableBase.Columns.Add("EmployeeLastName", employeeLastNameColumnBase);
            var employeeNameColumnBase = new ColumnBase<ColumnMappingBase>("EmployeeName", "nvarchar(150)", permissionsDomainEntitiesPermissionTableBase);
            permissionsDomainEntitiesPermissionTableBase.Columns.Add("EmployeeName", employeeNameColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", permissionsDomainEntitiesPermissionTableBase);
            permissionsDomainEntitiesPermissionTableBase.Columns.Add("Id", idColumnBase);
            var permissionDateOnUtcColumnBase = new ColumnBase<ColumnMappingBase>("PermissionDateOnUtc", "datetimeoffset", permissionsDomainEntitiesPermissionTableBase);
            permissionsDomainEntitiesPermissionTableBase.Columns.Add("PermissionDateOnUtc", permissionDateOnUtcColumnBase);
            var permissionTypeIdColumnBase = new ColumnBase<ColumnMappingBase>("PermissionTypeId", "int", permissionsDomainEntitiesPermissionTableBase);
            permissionsDomainEntitiesPermissionTableBase.Columns.Add("PermissionTypeId", permissionTypeIdColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("version", "rowversion", permissionsDomainEntitiesPermissionTableBase)
            {
                IsNullable = true
            };
            permissionsDomainEntitiesPermissionTableBase.Columns.Add("version", versionColumnBase);
            relationalModel.DefaultTables.Add("Permissions.Domain.Entities.Permission", permissionsDomainEntitiesPermissionTableBase);
            var permissionsDomainEntitiesPermissionMappingBase = new TableMappingBase<ColumnMappingBase>(permission, permissionsDomainEntitiesPermissionTableBase, true);
            permissionsDomainEntitiesPermissionTableBase.AddTypeMapping(permissionsDomainEntitiesPermissionMappingBase, false);
            defaultTableMappings.Add(permissionsDomainEntitiesPermissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, permission.FindProperty("Id")!, permissionsDomainEntitiesPermissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)employeeLastNameColumnBase, permission.FindProperty("EmployeeLastName")!, permissionsDomainEntitiesPermissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)employeeNameColumnBase, permission.FindProperty("EmployeeName")!, permissionsDomainEntitiesPermissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)permissionDateOnUtcColumnBase, permission.FindProperty("PermissionDateOnUtc")!, permissionsDomainEntitiesPermissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)permissionTypeIdColumnBase, permission.FindProperty("PermissionTypeId")!, permissionsDomainEntitiesPermissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, permission.FindProperty("version")!, permissionsDomainEntitiesPermissionMappingBase);

            var tableMappings = new List<TableMapping>();
            permission.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var permissionTable = new Table("Permission", "permissions", relationalModel);
            var idColumn = new Column("Id", "int", permissionTable);
            permissionTable.Columns.Add("Id", idColumn);
            var employeeLastNameColumn = new Column("EmployeeLastName", "nvarchar(150)", permissionTable);
            permissionTable.Columns.Add("EmployeeLastName", employeeLastNameColumn);
            var employeeNameColumn = new Column("EmployeeName", "nvarchar(150)", permissionTable);
            permissionTable.Columns.Add("EmployeeName", employeeNameColumn);
            var permissionDateOnUtcColumn = new Column("PermissionDateOnUtc", "datetimeoffset", permissionTable);
            permissionTable.Columns.Add("PermissionDateOnUtc", permissionDateOnUtcColumn);
            var permissionTypeIdColumn = new Column("PermissionTypeId", "int", permissionTable);
            permissionTable.Columns.Add("PermissionTypeId", permissionTypeIdColumn);
            var versionColumn = new Column("version", "rowversion", permissionTable)
            {
                IsNullable = true
            };
            permissionTable.Columns.Add("version", versionColumn);
            var pK_Permission = new UniqueConstraint("PK_Permission", permissionTable, new[] { idColumn });
            permissionTable.PrimaryKey = pK_Permission;
            var pK_PermissionUc = RelationalModel.GetKey(this,
                "Permissions.Domain.Entities.Permission",
                new[] { "Id" });
            pK_Permission.MappedKeys.Add(pK_PermissionUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PermissionUc).Add(pK_Permission);
            permissionTable.UniqueConstraints.Add("PK_Permission", pK_Permission);
            var iX_Permission_EmployeeName_EmployeeLastName_PermissionTypeId = new TableIndex(
            "IX_Permission_EmployeeName_EmployeeLastName_PermissionTypeId", permissionTable, new[] { employeeNameColumn, employeeLastNameColumn, permissionTypeIdColumn }, false);
            var iX_Permission_EmployeeName_EmployeeLastName_PermissionTypeIdIx = RelationalModel.GetIndex(this,
                "Permissions.Domain.Entities.Permission",
                new[] { "EmployeeName", "EmployeeLastName", "PermissionTypeId" });
            iX_Permission_EmployeeName_EmployeeLastName_PermissionTypeId.MappedIndexes.Add(iX_Permission_EmployeeName_EmployeeLastName_PermissionTypeIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Permission_EmployeeName_EmployeeLastName_PermissionTypeIdIx).Add(iX_Permission_EmployeeName_EmployeeLastName_PermissionTypeId);
            permissionTable.Indexes.Add("IX_Permission_EmployeeName_EmployeeLastName_PermissionTypeId", iX_Permission_EmployeeName_EmployeeLastName_PermissionTypeId);
            var iX_Permission_PermissionTypeId = new TableIndex(
            "IX_Permission_PermissionTypeId", permissionTable, new[] { permissionTypeIdColumn }, false);
            var iX_Permission_PermissionTypeIdIx = RelationalModel.GetIndex(this,
                "Permissions.Domain.Entities.Permission",
                new[] { "PermissionTypeId" });
            iX_Permission_PermissionTypeId.MappedIndexes.Add(iX_Permission_PermissionTypeIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Permission_PermissionTypeIdIx).Add(iX_Permission_PermissionTypeId);
            permissionTable.Indexes.Add("IX_Permission_PermissionTypeId", iX_Permission_PermissionTypeId);
            relationalModel.Tables.Add(("Permission", "permissions"), permissionTable);
            var permissionTableMapping = new TableMapping(permission, permissionTable, true);
            permissionTable.AddTypeMapping(permissionTableMapping, false);
            tableMappings.Add(permissionTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, permission.FindProperty("Id")!, permissionTableMapping);
            RelationalModel.CreateColumnMapping(employeeLastNameColumn, permission.FindProperty("EmployeeLastName")!, permissionTableMapping);
            RelationalModel.CreateColumnMapping(employeeNameColumn, permission.FindProperty("EmployeeName")!, permissionTableMapping);
            RelationalModel.CreateColumnMapping(permissionDateOnUtcColumn, permission.FindProperty("PermissionDateOnUtc")!, permissionTableMapping);
            RelationalModel.CreateColumnMapping(permissionTypeIdColumn, permission.FindProperty("PermissionTypeId")!, permissionTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, permission.FindProperty("version")!, permissionTableMapping);

            var permissionType = FindEntityType("Permissions.Domain.Entities.PermissionType")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            permissionType.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var permissionsDomainEntitiesPermissionTypeTableBase = new TableBase("Permissions.Domain.Entities.PermissionType", null, relationalModel);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(250)", permissionsDomainEntitiesPermissionTypeTableBase);
            permissionsDomainEntitiesPermissionTypeTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", permissionsDomainEntitiesPermissionTypeTableBase);
            permissionsDomainEntitiesPermissionTypeTableBase.Columns.Add("Id", idColumnBase0);
            var versionColumnBase0 = new ColumnBase<ColumnMappingBase>("version", "rowversion", permissionsDomainEntitiesPermissionTypeTableBase)
            {
                IsNullable = true
            };
            permissionsDomainEntitiesPermissionTypeTableBase.Columns.Add("version", versionColumnBase0);
            relationalModel.DefaultTables.Add("Permissions.Domain.Entities.PermissionType", permissionsDomainEntitiesPermissionTypeTableBase);
            var permissionsDomainEntitiesPermissionTypeMappingBase = new TableMappingBase<ColumnMappingBase>(permissionType, permissionsDomainEntitiesPermissionTypeTableBase, true);
            permissionsDomainEntitiesPermissionTypeTableBase.AddTypeMapping(permissionsDomainEntitiesPermissionTypeMappingBase, false);
            defaultTableMappings0.Add(permissionsDomainEntitiesPermissionTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, permissionType.FindProperty("Id")!, permissionsDomainEntitiesPermissionTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, permissionType.FindProperty("Description")!, permissionsDomainEntitiesPermissionTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase0, permissionType.FindProperty("version")!, permissionsDomainEntitiesPermissionTypeMappingBase);

            var tableMappings0 = new List<TableMapping>();
            permissionType.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var permissionTypeTable = new Table("PermissionType", "permissions", relationalModel);
            var idColumn0 = new Column("Id", "int", permissionTypeTable);
            permissionTypeTable.Columns.Add("Id", idColumn0);
            var descriptionColumn = new Column("Description", "nvarchar(250)", permissionTypeTable);
            permissionTypeTable.Columns.Add("Description", descriptionColumn);
            var versionColumn0 = new Column("version", "rowversion", permissionTypeTable)
            {
                IsNullable = true
            };
            permissionTypeTable.Columns.Add("version", versionColumn0);
            var pK_PermissionType = new UniqueConstraint("PK_PermissionType", permissionTypeTable, new[] { idColumn0 });
            permissionTypeTable.PrimaryKey = pK_PermissionType;
            var pK_PermissionTypeUc = RelationalModel.GetKey(this,
                "Permissions.Domain.Entities.PermissionType",
                new[] { "Id" });
            pK_PermissionType.MappedKeys.Add(pK_PermissionTypeUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PermissionTypeUc).Add(pK_PermissionType);
            permissionTypeTable.UniqueConstraints.Add("PK_PermissionType", pK_PermissionType);
            relationalModel.Tables.Add(("PermissionType", "permissions"), permissionTypeTable);
            var permissionTypeTableMapping = new TableMapping(permissionType, permissionTypeTable, true);
            permissionTypeTable.AddTypeMapping(permissionTypeTableMapping, false);
            tableMappings0.Add(permissionTypeTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, permissionType.FindProperty("Id")!, permissionTypeTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, permissionType.FindProperty("Description")!, permissionTypeTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn0, permissionType.FindProperty("version")!, permissionTypeTableMapping);
            var fK_Permission_PermissionType_PermissionTypeId = new ForeignKeyConstraint(
                "FK_Permission_PermissionType_PermissionTypeId", permissionTable, permissionTypeTable,
                new[] { permissionTypeIdColumn },
                permissionTypeTable.FindUniqueConstraint("PK_PermissionType")!, ReferentialAction.Cascade);
            var fK_Permission_PermissionType_PermissionTypeIdFk = RelationalModel.GetForeignKey(this,
                "Permissions.Domain.Entities.Permission",
                new[] { "PermissionTypeId" },
                "Permissions.Domain.Entities.PermissionType",
                new[] { "Id" });
            fK_Permission_PermissionType_PermissionTypeId.MappedForeignKeys.Add(fK_Permission_PermissionType_PermissionTypeIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Permission_PermissionType_PermissionTypeIdFk).Add(fK_Permission_PermissionType_PermissionTypeId);
            permissionTable.ForeignKeyConstraints.Add(fK_Permission_PermissionType_PermissionTypeId);
            permissionTypeTable.ReferencingForeignKeyConstraints.Add(fK_Permission_PermissionType_PermissionTypeId);
            return relationalModel.MakeReadOnly();
        }
    }
}
